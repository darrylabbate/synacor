op = {
    fn { exit()                        }, // halt
    fn { r[w] = y              ip += 3 }, // set
    fn { s[sp++] = x           ip += 2 }, // push
    fn { r[w] = s[--sp]        ip += 2 }, // pop
    fn { r[w] = y == z         ip += 4 }, // eq
    fn { r[w] = y >  z         ip += 4 }, // gt
    fn { ip   = x                      }, // jmp
    fn { ip   =  x ? y :       ip +  3 }, // jt
    fn { ip   = !x ? y :       ip +  3 }, // jf
    fn { r[w] = y + z & 0x7fff ip += 4 }, // add
    fn { r[w] = y * z & 0x7fff ip += 4 }, // mult
    fn { r[w] = y % z          ip += 4 }, // mod
    fn { r[w] = y & z          ip += 4 }, // and
    fn { r[w] = y | z          ip += 4 }, // or
    fn { r[w] = ~y & 0x7fff    ip += 3 }, // not
    fn { r[w] = m[y]           ip += 3 }, // rmem
    fn { m[x] = y              ip += 3 }, // wmem
    fn { s[sp++] = ip + 2      ip  = x }, // call
    fn { ip = s[--sp]                  }, // ret
    fn { putc(x)               ip += 2 }, // out
    fn { read_input()          ip += 2 }, // in
    fn {                       ip += 1 }  // noop
}

fn read_input {
    if ibuf == null {
        do {
            c = getc()
            ibuf #= char(c)
        } while c != '\n'
    }
    if ibuf == "disas\n" {
        local f = open("mem.s", "w")
        disas_mem(f)
        "[VM] Disassembled memory state dumped to mem.s"
        ibuf = null
        "What do you do?"
        read_input()
    } elif ibuf == "strings\n" {
        local f = open("strings.txt", "w")
        dump_strings(f)
        "[VM] Strings dumped to strings.txt"
        ibuf = null
        "What do you do?"
        read_input()
    } elif ibuf == "q\n" {
        "Exiting VM"
        exit()
    } else {
        r[w] = byte(ibuf)
        ibuf = ibuf == "\n" ? null : ibuf[1..]
    }
}

mnemonics = split("halt set push pop eq gt jmp jt jf add mult mod and or not rmem wmem call ret out in noop")

arity = {0,2,1,1,3,3,1,2,2,3,3,3,3,3,2,2,2,1,0,1,1,0}

fn disas_mnemonic(m, f) {
    if m <= 21
        write(fmt("  %-4s ", mnemonics[m]), f)
    else
        write("     ", f)
}

fn disas_addr(addr, f) {
    write(fmt("0x%04x:  %04x", addr, m[addr]), f)
}

fn disas_raw_words(n, f) {
    write(n < 1 ? "     " : fmt(" %04x", m[dp+1]), f)
    write(n < 2 ? "     " : fmt(" %04x", m[dp+2]), f)
    write(n < 3 ? "     " : fmt(" %04x", m[dp+3]), f)
}

RSTR = " $%d"
OSTR = " 0x%x"

fn disas_operands(n, f) {
    if n >= 1
        write(fmt(m[dp+1] <= 0x7fff ? OSTR : RSTR, m[dp+1] & 0x7fff), f)
    if n >= 2
        write(fmt(m[dp+2] <= 0x7fff ? OSTR : RSTR, m[dp+2] & 0x7fff), f)
    if n >= 3
        write(fmt(m[dp+3] <= 0x7fff ? OSTR : RSTR, m[dp+3] & 0x7fff), f)
}

fn disas_out(f) {
    write(" \"", f)
    while m[dp] == 19 {
        local dx = m[dp+1] dx = dx <= 0x7fff ? dx : r[dx&0x7fff]
        write(dx == '\n' ? "\\n" : char(dx), f)
        dp += 2
    }
    write("\"", f)
}

STRINGS_START = 0x17b5
STRINGS_END   = 0x68e3

fn disas_mem(f) {
    dp = 0
    // Executable code
    write("; Program\n\n", f)
    while dp < STRINGS_START-1 {
        disas_addr(dp, f)
        disas_raw_words(arity[m[dp]], f)
        disas_mnemonic(m[dp], f)
        if m[dp] == 19 {
            disas_out(f)
        } else {
            disas_operands(arity[m[dp]] ?: 0, f)
            dp += arity[m[dp]] + 1
        }
        write("\n", f)
    }

    // String data
    write("\n; Strings\n\n", f)
    while dp < STRINGS_END {
        if char(m[dp]) ~ /[ -~\n]/ {
            write(fmt("0x%04x: \"", dp), f)
            while (m[dp] >= ' ' && m[dp] <= '~') || m[dp] == '\n' {
                write(m[dp] == '\n' ? "\\n" : char(m[dp]), f)
                dp++
            }
            write("\"\n", f)
        }
        dp++
    }

    // Unknown data
    write("\n; Unknown\n\n", f)
    while dp < #m {
        write(fmt("0x%04x: ", dp), f)
        for i in 7 {
            if m[dp] == null break
            write(fmt(" %04x", m[dp]), f)
            dp++
        }
        write("\n", f)
    }
    write("\n", f)
}

fn dump_strings(f) {
    dp = 0
    while dp < #m {
        if m[dp] >= ' ' && m[dp] <= '~' {
            write(fmt("%04x: ", dp), f)
            while m[dp] >= ' ' && m[dp] <= '~' {
                write(char(m[dp]), f)
                dp++
            }
            write("\n", f)
        }
        dp++
    }
}

bin = open(arg[1])
while !eof(bin) {
    local l = getc(bin)
    local h = getc(bin)
    m[i++] = l | (h << 8)
}
close(bin)

ip = 0
loop {
    x = m[ip+1] x = x <= 0x7fff ? x : r[x&0x7fff]
    y = m[ip+2] y = y <= 0x7fff ? y : r[y&0x7fff]
    z = m[ip+3] z = z <= 0x7fff ? z : r[z&0x7fff]
    w = m[ip+1] & 0x7fff
    op[m[ip]]()
}
