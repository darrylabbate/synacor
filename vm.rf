#!/usr/bin/env riff
// usage:
//   cat do.txt - | ./vm.rf challenge.bin

fn vm_msg(s) { print("[VM]", s) }

CODE_ADDR     = 0x17f2
STRINGS_START = 0x17b5
STRINGS_END   = 0x68e3
MAX_STRLEN    = 72
MAX_WORDS     = 8

op = {
    fn { exit()                        }, // halt
    fn { r[w] = y              ip += 3 }, // set
    fn { s[sp++] = x           ip += 2 }, // push
    fn { r[w] = s[--sp]        ip += 2 }, // pop
    fn { r[w] = y == z         ip += 4 }, // eq
    fn { r[w] = y >  z         ip += 4 }, // gt
    fn { ip   = x                      }, // jmp
    fn { ip   =  x ? y :       ip +  3 }, // jt
    fn { ip   = !x ? y :       ip +  3 }, // jf
    fn { r[w] = y + z & 0x7fff ip += 4 }, // add
    fn { r[w] = y * z & 0x7fff ip += 4 }, // mult
    fn { r[w] = y % z          ip += 4 }, // mod
    fn { r[w] = y & z          ip += 4 }, // and
    fn { r[w] = y | z          ip += 4 }, // or
    fn { r[w] = ~y & 0x7fff    ip += 3 }, // not
    fn { r[w] = m[y]           ip += 3 }, // rmem
    fn { m[x] = y              ip += 3 }, // wmem
    fn { s[sp++] = ip + 2      ip  = x }, // call
    fn { ip = s[--sp]                  }, // ret
    fn { putc(x)               ip += 2 }, // out
    fn { read_input()          ip += 2 }, // in
    fn {                       ip += 1 }  // noop
}

fn read_input {
    if ibuf == null {
        do {
            c = getc()
            ibuf #= char(c)
        } while c != '\n'
    }
    if ibuf ~ / ^disas   # Dump disassembly
              | ^strings # Dump strings
              | ^code    # Print most recent code
              | ^set     # Set register or memory value
              | ^q$      # Exit VM
              /x {
        if ibuf ~ /^disas/ {
            disas_mem("mem.s")
            vm_msg("Disassembled memory state dumped to mem.s")
        } elif ibuf ~ /^strings/ {
            dump_strings("strings.txt")
            vm_msg("Strings dumped to strings.txt")
        } elif ibuf ~ /^code/ {
            vm_msg("Most recent code: #{find_str(CODE_ADDR)}")
        } elif ibuf ~ /^set/ {
            local cmd  = split(ibuf)
            local arg1 = cmd[1]
            local val  = num(cmd[2])
            if arg1 ~ /^\$(\d*)/ {
                if $1 !~ /^[0-7]$/ {
                    vm_msg("Invalid register: #arg1")
                } else {
                    r[$1] = val
                    vm_msg("#arg1 set to #val (#{hex(val)})")
                }
            } else {
                arg1 = num(arg1)
                if arg1 == null || arg1 < 0 || arg1 > #m {
                    vm_msg("Invalid memory address: #arg1")
                } else {
                    m[arg1] = val
                    vm_msg("Address #{hex(arg1)} set to #val (#{hex(val)})")
                }
            }
        } elif ibuf == "q\n" {
            vm_msg("Exiting...")
            exit()
        }
        ibuf = null
        print("What do you do?")
        read_input()
    } else {
        r[w] = byte(ibuf)
        ibuf = ibuf == "\n" ? null : ibuf[1..]
    }
}

mnemonics = split("halt set push pop eq gt jmp jt jf add mult mod and or not rmem wmem call ret out in noop")

arity = [0,2,1,1,3,3,1,2,2,3,3,3,3,3,2,2,2,1,0,1,1,0]

fn disas_mnemonic(m, f) {
    if m <= 21
        write(fmt("  %-4s ", mnemonics[m]), f)
}

fn disas_addr(addr, f) {
    local b0 =  m[addr]       & 0xff
    local b1 = (m[addr] >> 8) & 0xff
    write(fmt("0x%04x: %02x %02x", addr, b0, b1), f)
}

fn disas_le_bytes(n, f) {
    for i in 1..3 {
        local b0 =  m[dp+i]       & 0xff
        local b1 = (m[dp+i] >> 8) & 0xff
        write(n < i ? "      " : fmt(" %02x %02x", b0, b1), f)
    }
}

fn disas_operands(n, f) {
    if !n return;
    for i in 1..n
        write(fmt(m[dp+i] <= 0x7fff ? " 0x%x" : " x%d", m[dp+i] & 0x7fff), f)
}

fn disas_out(f) {
    write(" \"", f)
    while m[dp] == 19 {
        local dx = m[dp+1]
        dx = dx <= 0x7fff ? dx : r[dx&0x7fff]
        write(dx == '\n' ? "\\n" : char(dx), f)
        dp += 2
    }
    write("\"", f)
}

fn disas_mem(path) {
    local f = open(path, "w")
    dp = 0
    // Executable code
    write("; Executable code\n\n", f)
    while dp < STRINGS_START-1 {
        disas_addr(dp, f)
        disas_le_bytes(arity[m[dp]], f)
        disas_mnemonic(m[dp], f)
        if m[dp] == 19 {
            disas_out(f)
        } else {
            disas_operands(arity[m[dp]] || 0, f)
            dp += arity[m[dp]] + 1
        }
        write("\n", f)
    }

    // String data
    write("\n; String data\n\n", f)
    while dp < STRINGS_END {
        if char(m[dp]) ~ /[ -~\n]/ {
            write(fmt("0x%04x: \"", dp), f)
            local count = 0
            while (m[dp] >= ' ' && m[dp] <= '~') || m[dp] == '\n' {
                write(m[dp] == '\n' ? "\\n" :
                      m[dp] == '"'  ? "\\\""  :
                      char(m[dp]), f)
                if char(m[dp]) ~ /[\n"]/
                    if ++count % MAX_STRLEN == 0
                        write("\"\n        \"", f)
                dp++
                if ++count % MAX_STRLEN == 0
                    write("\"\n        \"", f)
            }
            write("\"\n", f)
        }
        dp++
    }

    // Unknown data
    write("\n; Unknown/encrypted data\n\n", f)
    while dp < #m {
        write(fmt("0x%04x:", dp), f)
        for i in 1..MAX_WORDS {
            if m[dp] == null break
            write(fmt(" %02x %02x", m[dp] & 0xff, (m[dp] >> 8) & 0xff), f)
            dp++
        }
        write("\n", f)
    }
    close(f)
}

fn find_str(addr) {
    local str
    while char(m[addr]) ~ /[ -~\n]/ {
        str #= char(m[addr++])
    }
    return str or "<not found>"
}

fn dump_strings(path) {
    local f = open(path, "w")
    local dp = 0
    while dp < #m {
        if m[dp] >= ' ' && m[dp] <= '~' {
            write(fmt("%04x: ", dp), f)
            while m[dp] >= ' ' && m[dp] <= '~' {
                write(char(m[dp]), f)
                dp++
            }
            write("\n", f)
        }
        dp++
    }
    close(f)
}

bin = open(arg[1] or "challenge.bin")
while read(bin,0) {
    local l = getc(bin)
    local h = getc(bin)
    m[i++] = l | (h << 8)
}
close(bin)

ip = 0
loop {
    x = m[ip+1] x = x <= 0x7fff ? x : r[x&0x7fff]
    y = m[ip+2] y = y <= 0x7fff ? y : r[y&0x7fff]
    z = m[ip+3] z = z <= 0x7fff ? z : r[z&0x7fff]
    w = m[ip+1] & 0x7fff
    op[m[ip]]()
}
